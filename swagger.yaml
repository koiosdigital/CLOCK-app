openapi: 3.0.3
info:
  title: Koios Digital Clock Firmware API
  description: |
    Comprehensive API specification for Koios Digital clock firmware supporting multiple variants:
    fibonacci, nixie, and wordclock. Each variant provides common functionality with variant-specific
    extensions for specialized clock displays.
  version: '1.0.0'
  contact:
    name: Koios Digital
    url: https://koiosdigital.net
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://{hostname}
    description: Clock device local server
    variables:
      hostname:
        default: kd-clock.local
        description: Device hostname or IP address

tags:
  - name: System
    description: System information and status
  - name: Time
    description: Time configuration and timezone management
  - name: LEDs
    description: LED strip configuration and effects (common to all variants)
  - name: Fibonacci
    description: Fibonacci clock variant specific endpoints
  - name: Nixie
    description: Nixie tube clock variant specific endpoints
  - name: Wordclock
    description: Word clock variant specific endpoints (uses LEDs only)

paths:
  /:
    get:
      tags:
        - System
      summary: Root welcome message
      description: Returns a welcome message for the API
      responses:
        '200':
          description: Welcome message
          content:
            text/plain:
              schema:
                type: string
                example: 'Welcome to the KD Clock API!'

  /api/system/about:
    get:
      tags:
        - System
      summary: Get system information
      description: Returns firmware version, variant, and device hostname
      responses:
        '200':
          description: System information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/system/config:
    get:
      tags:
        - System
      summary: Get system configuration
      description: Returns current time, timezone, and WiFi hostname configuration
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - System
      summary: Update system configuration
      description: Updates timezone, NTP server, and WiFi hostname settings. Restart required to apply changes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfigRequest'
      responses:
        '200':
          description: Configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/time/zonedb:
    get:
      tags:
        - Time
      summary: Get available timezones
      description: |
        Returns all available IANA timezone names and POSIX rules from the embedded timezone database.
        Response is chunked to handle large datasets efficiently.
      responses:
        '200':
          description: List of available timezones
          headers:
            Transfer-Encoding:
              schema:
                type: string
                enum: [chunked]
              description: Response is sent using chunked transfer encoding
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timezone'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/leds:
    get:
      tags:
        - LEDs
      summary: Get LED configuration
      description: Returns current LED strip configuration including mode, color, brightness, and speed
      responses:
        '200':
          description: LED configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LEDConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - LEDs
      summary: Update LED configuration
      description: Updates LED strip settings including effect mode, color, brightness, and speed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LEDConfigRequest'
      responses:
        '200':
          description: LED configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/leds/ws:
    get:
      tags:
        - LEDs
        - WebSocket
      summary: LED WebSocket connection
      description: |
        Establishes a WebSocket connection for real-time LED control.

        **Connection Behavior:**
        - On connect: Server immediately sends current LED state
        - On update: Server broadcasts updated state to all connected clients

        **Message Format:**
        - Send: JSON with any LED configuration fields to update
        - Receive: Complete LED state object

        **Example Usage:**
        ```javascript
        const ws = new WebSocket('ws://device-ip/api/leds/ws');
        ws.onmessage = (event) => {
          const ledState = JSON.parse(event.data);
          console.log('LED state:', ledState);
        };
        ws.send(JSON.stringify({color: {r: 255, g: 0, b: 0}}));
        ```
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: WebSocket upgrade failed

  /api/fibonacci:
    get:
      tags:
        - Fibonacci
      summary: Get Fibonacci clock configuration
      description: Returns current configuration for the Fibonacci clock display including available themes (fibonacci variant only)
      responses:
        '200':
          description: Fibonacci clock configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FibonacciConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Fibonacci
      summary: Update Fibonacci clock configuration
      description: Updates Fibonacci clock settings including brightness, theme, and on/off state
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FibonacciConfigRequest'
      responses:
        '200':
          description: Fibonacci configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/fibonacci/ws:
    get:
      tags:
        - Fibonacci
      summary: Fibonacci WebSocket endpoint
      description: |
        WebSocket endpoint for real-time Fibonacci clock configuration updates.
        Clients receive the current state immediately upon connection and live updates
        when configuration changes occur.
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Invalid WebSocket request
      x-websocket:
        description: |
          Real-time Fibonacci clock control via WebSocket

          **Connection:**
          ```javascript
          const ws = new WebSocket('ws://device-ip/api/fibonacci/ws');
          ```

          **Received on connect:** Current configuration JSON
          **Send:** Configuration update JSON (same format as POST /api/fibonacci)
          **Receive:** Updated configuration JSON after any change

  /api/fibonacci/themes:
    get:
      tags:
        - Fibonacci
      summary: Get available Fibonacci themes (DEPRECATED)
      description: |
        **DEPRECATED:** This endpoint has been removed. Theme information is now included
        in the main `/api/fibonacci` GET response under the `themes` array.
      deprecated: true
      responses:
        '404':
          description: Endpoint no longer available

  /api/nixie:
    get:
      tags:
        - Nixie
      summary: Get Nixie tube configuration
      description: Returns current configuration for the Nixie tube display (nixie variant only)
      responses:
        '200':
          description: Nixie tube configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NixieConfig'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Nixie
      summary: Update Nixie tube configuration
      description: Updates Nixie tube display settings including brightness, time format, and blinking dots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NixieConfigRequest'
      responses:
        '200':
          description: Nixie configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/nixie/ws:
    get:
      tags:
        - Nixie
      summary: Nixie WebSocket endpoint
      description: |
        WebSocket endpoint for real-time Nixie tube configuration updates.
        Clients receive the current state immediately upon connection and live updates
        when configuration changes occur.
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Invalid WebSocket request
      x-websocket:
        description: |
          Real-time Nixie tube control via WebSocket

          **Connection:**
          ```javascript
          const ws = new WebSocket('ws://device-ip/api/nixie/ws');
          ```

          **Received on connect:** Current configuration JSON
          **Send:** Configuration update JSON (same format as POST /api/nixie)
          **Receive:** Updated configuration JSON after any change

components:
  schemas:
    SystemInfo:
      type: object
      required:
        - model
        - type
        - subtype
        - version
      properties:
        type:
          type: string
          enum: [clock]
          description: Clock
          example: 'clock'
        subtype:
          type: string
          enum: [fibonacci, nixie, wordclock]
          description: The specific clock variant
          example: 'fibonacci'
        version:
          type: string
          description: Firmware version string
          example: '1.0.0'
        model:
          type: string
          description: Device model
          example: 'kd-clock-001'

    SystemConfig:
      type: object
      required:
        - auto_timezone
        - timezone
        - ntp_server
        - wifi_hostname
      properties:
        auto_timezone:
          type: boolean
          description: Whether to automatically fetch timezone from API
          example: true
        timezone:
          type: string
          maxLength: 63
          description: IANA timezone name (e.g., "America/New_York")
          example: 'America/New_York'
        ntp_server:
          type: string
          maxLength: 127
          description: NTP server URL for time synchronization
          example: 'pool.ntp.org'
        wifi_hostname:
          type: string
          maxLength: 63
          description: WiFi hostname for network identification
          example: 'clock-12345'

    SystemConfigRequest:
      type: object
      properties:
        auto_timezone:
          type: boolean
          description: Whether to automatically fetch timezone from API
          example: true
        timezone:
          type: string
          maxLength: 63
          description: IANA timezone name (e.g., "America/New_York")
          example: 'America/New_York'
        ntp_server:
          type: string
          maxLength: 127
          description: NTP server URL for time synchronization
          example: 'pool.ntp.org'
        wifi_hostname:
          type: string
          maxLength: 63
          description: WiFi hostname for network identification
          example: 'clock-12345'

    Timezone:
      type: object
      required:
        - name
        - rule
      properties:
        name:
          type: string
          description: IANA timezone name
          example: 'America/New_York'
        rule:
          type: string
          description: POSIX timezone rule
          example: 'EST5EDT,M3.2.0,M11.1.0'

    RGBColor:
      type: object
      required:
        - r
        - g
        - b
      properties:
        r:
          type: integer
          minimum: 0
          maximum: 255
          description: Red component (0-255)
          example: 255
        g:
          type: integer
          minimum: 0
          maximum: 255
          description: Green component (0-255)
          example: 128
        b:
          type: integer
          minimum: 0
          maximum: 255
          description: Blue component (0-255)
          example: 64
        w:
          type: integer
          minimum: 0
          maximum: 255
          description: White component (0-255) - only for RGBW strips
          example: 0

    LEDConfig:
      type: object
      required:
        - mode
        - color
        - brightness
        - speed
        - on
      properties:
        mode:
          type: string
          enum: [off, solid, blink, breathe, cyclic, rainbow]
          description: LED effect mode
          example: 'solid'
        color:
          $ref: '#/components/schemas/RGBColor'
        brightness:
          type: integer
          minimum: 0
          maximum: 255
          description: LED brightness level (0-255)
          example: 128
        speed:
          type: integer
          minimum: 1
          maximum: 100
          description: Effect animation speed (1-100)
          example: 50
        on:
          type: boolean
          description: Whether LEDs are currently on
          example: true

    LEDConfigRequest:
      type: object
      properties:
        mode:
          type: string
          enum: [off, solid, blink, breathe, cyclic, rainbow]
          description: LED effect mode
          example: 'solid'
        color:
          $ref: '#/components/schemas/RGBColor'
        brightness:
          type: integer
          minimum: 0
          maximum: 255
          description: LED brightness level (0-255)
          example: 128
        speed:
          type: integer
          minimum: 1
          maximum: 100
          description: Effect animation speed (1-100)
          example: 50
        on:
          type: boolean
          description: Whether LEDs should be on
          example: true

    FibonacciConfig:
      type: object
      required:
        - brightness
        - theme_id
        - on
        - themes
      properties:
        brightness:
          type: integer
          minimum: 0
          maximum: 255
          description: Display brightness level (0-255)
          example: 128
        theme_id:
          type: integer
          minimum: 0
          description: Selected color theme ID
          example: 2
        on:
          type: boolean
          description: Whether the Fibonacci display is currently on
          example: true
        themes:
          type: array
          description: Array of all available color themes
          items:
            $ref: '#/components/schemas/FibonacciTheme'

    FibonacciConfigRequest:
      type: object
      properties:
        brightness:
          type: integer
          minimum: 0
          maximum: 255
          description: Display brightness level (0-255)
          example: 128
        theme_id:
          type: integer
          minimum: 0
          description: Selected color theme ID
          example: 2
        on:
          type: boolean
          description: Whether the Fibonacci display should be on
          example: true

    FibonacciTheme:
      type: object
      required:
        - id
        - name
        - hour_color
        - minute_color
        - both_color
      properties:
        id:
          type: integer
          description: Unique theme identifier
          example: 1
        name:
          type: string
          description: Human-readable theme name
          example: 'RGB'
        hour_color:
          type: string
          pattern: '^#[0-9A-F]{6}$'
          description: RGB color value for hour indication (hex format)
          example: '#FF0A0A'
        minute_color:
          type: string
          pattern: '^#[0-9A-F]{6}$'
          description: RGB color value for minute indication (hex format)
          example: '#0AFF0A'
        both_color:
          type: string
          pattern: '^#[0-9A-F]{6}$'
          description: RGB color value when displaying both hour and minute (hex format)
          example: '#0A0AFF'

    NixieConfig:
      type: object
      required:
        - brightness
        - military_time
        - blinking_dots
        - on
      properties:
        brightness:
          type: integer
          minimum: 0
          maximum: 100
          description: Nixie tube brightness level (0-100, maps to 20-100% duty cycle inverted)
          example: 80
        military_time:
          type: boolean
          description: Whether to use 24-hour format (true) or 12-hour format (false)
          example: false
        blinking_dots:
          type: boolean
          description: Whether separator dots should blink with seconds
          example: true
        on:
          type: boolean
          description: Whether the Nixie tubes are currently on
          example: true

    NixieConfigRequest:
      type: object
      properties:
        brightness:
          type: integer
          minimum: 0
          maximum: 100
          description: Nixie tube brightness level (0-100, maps to 20-100% duty cycle inverted)
          example: 80
        military_time:
          type: boolean
          description: Whether to use 24-hour format (true) or 12-hour format (false)
          example: false
        blinking_dots:
          type: boolean
          description: Whether separator dots should blink with seconds
          example: true
        on:
          type: boolean
          description: Whether the Nixie tubes should be on
          example: true

    SuccessResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [success]
          description: Operation status
          example: 'success'
        message:
          type: string
          description: Optional success message
          example: 'Configuration updated successfully'

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: 'Invalid JSON format'
        details:
          type: string
          description: Additional error details
          example: 'Expected object, got string'

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Invalid JSON format'

    RequestTimeout:
      description: Request timeout - request took too long to process
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Request timeout'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: 'Internal server error'

  parameters:
    FirmwareVariant:
      name: X-Firmware-Variant
      in: header
      description: Firmware variant identifier
      schema:
        type: string
        enum: [fibonacci, nixie, wordclock]

  examples:
    FibonacciSystemInfo:
      summary: Fibonacci variant system info
      value:
        firmware_variant: 'fibonacci'
        version: '1.0.0'
        hostname: 'kd-fibonacci-001'

    NixieSystemInfo:
      summary: Nixie variant system info
      value:
        firmware_variant: 'nixie'
        version: '1.0.0'
        hostname: 'kd-nixie-001'

    WordclockSystemInfo:
      summary: Wordclock variant system info
      value:
        firmware_variant: 'wordclock'
        version: '1.0.0'
        hostname: 'kd-wordclock-001'

    FibonacciLEDConfig:
      summary: Fibonacci LED configuration
      value:
        mode: 'solid'
        color:
          r: 255
          g: 0
          b: 0
          w: 0
        brightness: 128
        speed: 50
        on: true

    NixieLEDConfig:
      summary: Nixie LED configuration (underglow)
      value:
        mode: 'breathe'
        color:
          r: 255
          g: 165
          b: 0
        brightness: 64
        speed: 25
        on: true

    WordclockLEDConfig:
      summary: Wordclock LED configuration
      value:
        mode: 'solid'
        color:
          r: 255
          g: 255
          b: 255
        brightness: 200
        speed: 50
        on: true

    SystemConfigUSEast:
      summary: US Eastern timezone configuration
      value:
        auto_timezone: false
        timezone: 'America/New_York'
        ntp_server: 'us.pool.ntp.org'
        wifi_hostname: 'clock-living-room'

    SystemConfigEurope:
      summary: European timezone configuration
      value:
        auto_timezone: false
        timezone: 'Europe/London'
        ntp_server: 'europe.pool.ntp.org'
        wifi_hostname: 'clock-kitchen'

    FibonacciConfigExample:
      summary: Fibonacci configuration example
      value:
        brightness: 150
        theme_id: 3
        on: true

    NixieConfigExample:
      summary: Nixie configuration example
      value:
        brightness: 75
        military_time: false
        blinking_dots: true
        on: true

externalDocs:
  description: Koios Digital Documentation
  url: https://docs.koiosdigital.net

// This file is auto-generated by @hey-api/openapi-ts

export type SystemConfig = {
    /**
     * Whether to automatically detect timezone
     */
    auto_timezone?: boolean;
    /**
     * IANA timezone name
     */
    timezone?: string;
    /**
     * NTP server hostname or IP
     */
    ntp_server?: string;
    /**
     * WiFi hostname for the device
     */
    wifi_hostname?: string;
};

export type LedConfig = {
    /**
     * LED effect mode
     */
    mode?: 'solid' | 'blink' | 'breathe' | 'cyclic' | 'rainbow' | 'color_wipe' | 'theater_chase' | 'sparkle';
    color?: {
        /**
         * Red component
         */
        r: number;
        /**
         * Green component
         */
        g: number;
        /**
         * Blue component
         */
        b: number;
        /**
         * White component (RGBW strips only)
         */
        w?: number;
    };
    /**
     * Overall brightness level
     */
    brightness?: number;
    /**
     * Animation speed (lower = slower)
     */
    speed?: number;
    /**
     * Whether LEDs are enabled
     */
    on?: boolean;
};

export type NixieConfig = {
    /**
     * Nixie tube brightness percentage
     */
    brightness?: number;
    /**
     * Whether to use 24-hour (military) time format
     */
    military_time?: boolean;
    /**
     * Whether colon dots should blink every second
     */
    blinking_dots?: boolean;
    /**
     * Whether Nixie tubes are enabled
     */
    on?: boolean;
};

export type FibonacciTheme = {
    /**
     * Theme ID
     */
    id?: number;
    /**
     * Theme name
     */
    name?: string;
    /**
     * Color for hour indicators (hex format)
     */
    hour_color?: string;
    /**
     * Color for minute indicators (hex format)
     */
    minute_color?: string;
    /**
     * Color when hour and minute overlap (hex format)
     */
    both_color?: string;
};

export type FibonacciConfig = {
    /**
     * LED brightness level
     */
    brightness?: number;
    /**
     * ID of the selected color theme
     */
    theme_id?: number;
    /**
     * Whether Fibonacci clock is enabled
     */
    on?: boolean;
    /**
     * Available color themes
     */
    readonly themes?: Array<FibonacciTheme>;
};

export type FibonacciConfigUpdate = {
    /**
     * LED brightness level
     */
    brightness?: number;
    /**
     * ID of the selected color theme
     */
    theme_id?: number;
    /**
     * Whether Fibonacci clock is enabled
     */
    on?: boolean;
};

export type SuccessResponse = {
    status?: 'success';
};

export type ErrorResponse = {
    /**
     * Error message
     */
    error?: string;
};

export type GetApiAboutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/about';
};

export type GetApiAboutErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiAboutError = GetApiAboutErrors[keyof GetApiAboutErrors];

export type GetApiAboutResponses = {
    /**
     * Device information
     */
    200: {
        /**
         * Firmware variant/model name
         */
        model?: string;
        /**
         * Device type
         */
        type?: string;
        /**
         * Clock variant
         */
        subtype?: 'nixie' | 'fibonacci' | 'wordclock';
        /**
         * Firmware version
         */
        version?: string;
    };
};

export type GetApiAboutResponse = GetApiAboutResponses[keyof GetApiAboutResponses];

export type GetApiSystemConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/system/config';
};

export type GetApiSystemConfigErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiSystemConfigError = GetApiSystemConfigErrors[keyof GetApiSystemConfigErrors];

export type GetApiSystemConfigResponses = {
    /**
     * Current system configuration
     */
    200: SystemConfig;
};

export type GetApiSystemConfigResponse = GetApiSystemConfigResponses[keyof GetApiSystemConfigResponses];

export type PostApiSystemConfigData = {
    body: SystemConfig;
    path?: never;
    query?: never;
    url: '/api/system/config';
};

export type PostApiSystemConfigErrors = {
    /**
     * Bad request - invalid input
     */
    400: ErrorResponse;
    /**
     * Request timeout
     */
    408: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostApiSystemConfigError = PostApiSystemConfigErrors[keyof PostApiSystemConfigErrors];

export type PostApiSystemConfigResponses = {
    /**
     * Configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiSystemConfigResponse = PostApiSystemConfigResponses[keyof PostApiSystemConfigResponses];

export type GetApiTimeZonedbData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/time/zonedb';
};

export type GetApiTimeZonedbErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiTimeZonedbError = GetApiTimeZonedbErrors[keyof GetApiTimeZonedbErrors];

export type GetApiTimeZonedbResponses = {
    /**
     * List of available time zones
     */
    200: Array<{
        /**
         * Time zone name (e.g., "America/New_York")
         */
        name?: string;
        /**
         * POSIX timezone rule string
         */
        rule?: string;
    }>;
};

export type GetApiTimeZonedbResponse = GetApiTimeZonedbResponses[keyof GetApiTimeZonedbResponses];

export type GetApiLedsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/leds';
};

export type GetApiLedsErrors = {
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiLedsError = GetApiLedsErrors[keyof GetApiLedsErrors];

export type GetApiLedsResponses = {
    /**
     * Current LED configuration
     */
    200: LedConfig;
};

export type GetApiLedsResponse = GetApiLedsResponses[keyof GetApiLedsResponses];

export type PostApiLedsData = {
    body: LedConfig;
    path?: never;
    query?: never;
    url: '/api/leds';
};

export type PostApiLedsErrors = {
    /**
     * Bad request - invalid input
     */
    400: ErrorResponse;
    /**
     * Request timeout
     */
    408: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostApiLedsError = PostApiLedsErrors[keyof PostApiLedsErrors];

export type PostApiLedsResponses = {
    /**
     * LED configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiLedsResponse = PostApiLedsResponses[keyof PostApiLedsResponses];

export type GetApiLedsWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/leds/ws';
};

export type GetApiLedsWsErrors = {
    /**
     * WebSocket upgrade failed
     */
    400: unknown;
};

export type GetApiNixieData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/nixie';
};

export type GetApiNixieErrors = {
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiNixieError = GetApiNixieErrors[keyof GetApiNixieErrors];

export type GetApiNixieResponses = {
    /**
     * Current Nixie configuration
     */
    200: NixieConfig;
};

export type GetApiNixieResponse = GetApiNixieResponses[keyof GetApiNixieResponses];

export type PostApiNixieData = {
    body: NixieConfig;
    path?: never;
    query?: never;
    url: '/api/nixie';
};

export type PostApiNixieErrors = {
    /**
     * Bad request - invalid input
     */
    400: ErrorResponse;
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
    /**
     * Request timeout
     */
    408: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostApiNixieError = PostApiNixieErrors[keyof PostApiNixieErrors];

export type PostApiNixieResponses = {
    /**
     * Nixie configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiNixieResponse = PostApiNixieResponses[keyof PostApiNixieResponses];

export type GetApiNixieWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/nixie/ws';
};

export type GetApiNixieWsErrors = {
    /**
     * WebSocket upgrade failed
     */
    400: unknown;
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
};

export type GetApiFibonacciData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/fibonacci';
};

export type GetApiFibonacciErrors = {
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: string;
};

export type GetApiFibonacciError = GetApiFibonacciErrors[keyof GetApiFibonacciErrors];

export type GetApiFibonacciResponses = {
    /**
     * Current Fibonacci configuration
     */
    200: FibonacciConfig;
};

export type GetApiFibonacciResponse = GetApiFibonacciResponses[keyof GetApiFibonacciResponses];

export type PostApiFibonacciData = {
    body: FibonacciConfigUpdate;
    path?: never;
    query?: never;
    url: '/api/fibonacci';
};

export type PostApiFibonacciErrors = {
    /**
     * Bad request - invalid input
     */
    400: ErrorResponse;
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
    /**
     * Request timeout
     */
    408: string;
    /**
     * Internal server error
     */
    500: string;
};

export type PostApiFibonacciError = PostApiFibonacciErrors[keyof PostApiFibonacciErrors];

export type PostApiFibonacciResponses = {
    /**
     * Fibonacci configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiFibonacciResponse = PostApiFibonacciResponses[keyof PostApiFibonacciResponses];

export type GetApiFibonacciWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/fibonacci/ws';
};

export type GetApiFibonacciWsErrors = {
    /**
     * WebSocket upgrade failed
     */
    400: unknown;
    /**
     * Endpoint not available on this firmware variant
     */
    404: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://{clock_ip}' | (string & {});
};
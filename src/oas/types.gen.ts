// This file is auto-generated by @hey-api/openapi-ts

export type SystemInfo = {
    /**
     * Clock
     */
    type: 'clock';
    /**
     * The specific clock variant
     */
    subtype: 'fibonacci' | 'nixie' | 'wordclock';
    /**
     * Firmware version string
     */
    version: string;
    /**
     * Device model
     */
    model: string;
};

export type SystemConfig = {
    /**
     * Whether to automatically fetch timezone from API
     */
    auto_timezone: boolean;
    /**
     * IANA timezone name (e.g., "America/New_York")
     */
    timezone: string;
    /**
     * NTP server URL for time synchronization
     */
    ntp_server: string;
    /**
     * WiFi hostname for network identification
     */
    wifi_hostname: string;
};

export type SystemConfigRequest = {
    /**
     * Whether to automatically fetch timezone from API
     */
    auto_timezone?: boolean;
    /**
     * IANA timezone name (e.g., "America/New_York")
     */
    timezone?: string;
    /**
     * NTP server URL for time synchronization
     */
    ntp_server?: string;
    /**
     * WiFi hostname for network identification
     */
    wifi_hostname?: string;
};

export type Timezone = {
    /**
     * IANA timezone name
     */
    name: string;
    /**
     * POSIX timezone rule
     */
    rule: string;
};

export type RgbColor = {
    /**
     * Red component (0-255)
     */
    r: number;
    /**
     * Green component (0-255)
     */
    g: number;
    /**
     * Blue component (0-255)
     */
    b: number;
    /**
     * White component (0-255) - only for RGBW strips
     */
    w?: number;
};

export type LedConfig = {
    /**
     * LED effect mode
     */
    mode: 'off' | 'solid' | 'blink' | 'breathe' | 'cyclic' | 'rainbow';
    color: RgbColor;
    /**
     * LED brightness level (0-255)
     */
    brightness: number;
    /**
     * Effect animation speed (1-100)
     */
    speed: number;
    /**
     * Whether LEDs are currently on
     */
    on: boolean;
};

export type LedConfigRequest = {
    /**
     * LED effect mode
     */
    mode?: 'off' | 'solid' | 'blink' | 'breathe' | 'cyclic' | 'rainbow';
    color?: RgbColor;
    /**
     * LED brightness level (0-255)
     */
    brightness?: number;
    /**
     * Effect animation speed (1-100)
     */
    speed?: number;
    /**
     * Whether LEDs should be on
     */
    on?: boolean;
};

export type FibonacciConfig = {
    /**
     * Display brightness level (0-255)
     */
    brightness: number;
    /**
     * Selected color theme ID
     */
    theme_id: number;
    /**
     * Whether the Fibonacci display is currently on
     */
    on: boolean;
    /**
     * Array of all available color themes
     */
    themes: Array<FibonacciTheme>;
};

export type FibonacciConfigRequest = {
    /**
     * Display brightness level (0-255)
     */
    brightness?: number;
    /**
     * Selected color theme ID
     */
    theme_id?: number;
    /**
     * Whether the Fibonacci display should be on
     */
    on?: boolean;
};

export type FibonacciTheme = {
    /**
     * Unique theme identifier
     */
    id: number;
    /**
     * Human-readable theme name
     */
    name: string;
    /**
     * RGB color value for hour indication (hex format)
     */
    hour_color: string;
    /**
     * RGB color value for minute indication (hex format)
     */
    minute_color: string;
    /**
     * RGB color value when displaying both hour and minute (hex format)
     */
    both_color: string;
};

export type NixieConfig = {
    /**
     * Nixie tube brightness level (0-100, maps to 20-100% duty cycle inverted)
     */
    brightness: number;
    /**
     * Whether to use 24-hour format (true) or 12-hour format (false)
     */
    military_time: boolean;
    /**
     * Whether separator dots should blink with seconds
     */
    blinking_dots: boolean;
    /**
     * Whether the Nixie tubes are currently on
     */
    on: boolean;
};

export type NixieConfigRequest = {
    /**
     * Nixie tube brightness level (0-100, maps to 20-100% duty cycle inverted)
     */
    brightness?: number;
    /**
     * Whether to use 24-hour format (true) or 12-hour format (false)
     */
    military_time?: boolean;
    /**
     * Whether separator dots should blink with seconds
     */
    blinking_dots?: boolean;
    /**
     * Whether the Nixie tubes should be on
     */
    on?: boolean;
};

export type SuccessResponse = {
    /**
     * Operation status
     */
    status: 'success';
    /**
     * Optional success message
     */
    message?: string;
};

export type ErrorResponse = {
    /**
     * Error message
     */
    error: string;
    /**
     * Additional error details
     */
    details?: string;
};

/**
 * Firmware variant identifier
 */
export type FirmwareVariant = 'fibonacci' | 'nixie' | 'wordclock';

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Welcome message
     */
    200: string;
};

export type GetResponse = GetResponses[keyof GetResponses];

export type GetApiSystemAboutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/system/about';
};

export type GetApiSystemAboutErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiSystemAboutError = GetApiSystemAboutErrors[keyof GetApiSystemAboutErrors];

export type GetApiSystemAboutResponses = {
    /**
     * System information
     */
    200: SystemInfo;
};

export type GetApiSystemAboutResponse = GetApiSystemAboutResponses[keyof GetApiSystemAboutResponses];

export type GetApiSystemConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/system/config';
};

export type GetApiSystemConfigErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiSystemConfigError = GetApiSystemConfigErrors[keyof GetApiSystemConfigErrors];

export type GetApiSystemConfigResponses = {
    /**
     * System configuration
     */
    200: SystemConfig;
};

export type GetApiSystemConfigResponse = GetApiSystemConfigResponses[keyof GetApiSystemConfigResponses];

export type PostApiSystemConfigData = {
    body: SystemConfigRequest;
    path?: never;
    query?: never;
    url: '/api/system/config';
};

export type PostApiSystemConfigErrors = {
    /**
     * Bad request - invalid input data
     */
    400: ErrorResponse;
    /**
     * Request timeout - request took too long to process
     */
    408: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiSystemConfigError = PostApiSystemConfigErrors[keyof PostApiSystemConfigErrors];

export type PostApiSystemConfigResponses = {
    /**
     * Configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiSystemConfigResponse = PostApiSystemConfigResponses[keyof PostApiSystemConfigResponses];

export type GetApiTimeZonedbData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/time/zonedb';
};

export type GetApiTimeZonedbErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiTimeZonedbError = GetApiTimeZonedbErrors[keyof GetApiTimeZonedbErrors];

export type GetApiTimeZonedbResponses = {
    /**
     * List of available timezones
     */
    200: Array<Timezone>;
};

export type GetApiTimeZonedbResponse = GetApiTimeZonedbResponses[keyof GetApiTimeZonedbResponses];

export type GetApiLedsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/leds';
};

export type GetApiLedsErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiLedsError = GetApiLedsErrors[keyof GetApiLedsErrors];

export type GetApiLedsResponses = {
    /**
     * LED configuration
     */
    200: LedConfig;
};

export type GetApiLedsResponse = GetApiLedsResponses[keyof GetApiLedsResponses];

export type PostApiLedsData = {
    body: LedConfigRequest;
    path?: never;
    query?: never;
    url: '/api/leds';
};

export type PostApiLedsErrors = {
    /**
     * Bad request - invalid input data
     */
    400: ErrorResponse;
    /**
     * Request timeout - request took too long to process
     */
    408: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiLedsError = PostApiLedsErrors[keyof PostApiLedsErrors];

export type PostApiLedsResponses = {
    /**
     * LED configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiLedsResponse = PostApiLedsResponses[keyof PostApiLedsResponses];

export type GetApiLedsWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/leds/ws';
};

export type GetApiLedsWsErrors = {
    /**
     * WebSocket upgrade failed
     */
    400: unknown;
};

export type GetApiFibonacciData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/fibonacci';
};

export type GetApiFibonacciErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiFibonacciError = GetApiFibonacciErrors[keyof GetApiFibonacciErrors];

export type GetApiFibonacciResponses = {
    /**
     * Fibonacci clock configuration
     */
    200: FibonacciConfig;
};

export type GetApiFibonacciResponse = GetApiFibonacciResponses[keyof GetApiFibonacciResponses];

export type PostApiFibonacciData = {
    body: FibonacciConfigRequest;
    path?: never;
    query?: never;
    url: '/api/fibonacci';
};

export type PostApiFibonacciErrors = {
    /**
     * Bad request - invalid input data
     */
    400: ErrorResponse;
    /**
     * Request timeout - request took too long to process
     */
    408: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiFibonacciError = PostApiFibonacciErrors[keyof PostApiFibonacciErrors];

export type PostApiFibonacciResponses = {
    /**
     * Fibonacci configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiFibonacciResponse = PostApiFibonacciResponses[keyof PostApiFibonacciResponses];

export type GetApiFibonacciWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/fibonacci/ws';
};

export type GetApiFibonacciWsErrors = {
    /**
     * Invalid WebSocket request
     */
    400: unknown;
};

export type GetApiFibonacciThemesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/fibonacci/themes';
};

export type GetApiFibonacciThemesErrors = {
    /**
     * Endpoint no longer available
     */
    404: unknown;
};

export type GetApiNixieData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/nixie';
};

export type GetApiNixieErrors = {
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetApiNixieError = GetApiNixieErrors[keyof GetApiNixieErrors];

export type GetApiNixieResponses = {
    /**
     * Nixie tube configuration
     */
    200: NixieConfig;
};

export type GetApiNixieResponse = GetApiNixieResponses[keyof GetApiNixieResponses];

export type PostApiNixieData = {
    body: NixieConfigRequest;
    path?: never;
    query?: never;
    url: '/api/nixie';
};

export type PostApiNixieErrors = {
    /**
     * Bad request - invalid input data
     */
    400: ErrorResponse;
    /**
     * Request timeout - request took too long to process
     */
    408: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PostApiNixieError = PostApiNixieErrors[keyof PostApiNixieErrors];

export type PostApiNixieResponses = {
    /**
     * Nixie configuration updated successfully
     */
    200: SuccessResponse;
};

export type PostApiNixieResponse = PostApiNixieResponses[keyof PostApiNixieResponses];

export type GetApiNixieWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/nixie/ws';
};

export type GetApiNixieWsErrors = {
    /**
     * Invalid WebSocket request
     */
    400: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://{hostname}' | (string & {});
};
// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetApiAboutData, GetApiAboutResponses, GetApiAboutErrors, GetApiSystemConfigData, GetApiSystemConfigResponses, GetApiSystemConfigErrors, PostApiSystemConfigData, PostApiSystemConfigResponses, PostApiSystemConfigErrors, GetApiTimeZonedbData, GetApiTimeZonedbResponses, GetApiTimeZonedbErrors, GetApiLedsData, GetApiLedsResponses, GetApiLedsErrors, PostApiLedsData, PostApiLedsResponses, PostApiLedsErrors, GetApiLedsWsData, GetApiLedsWsErrors, GetApiNixieData, GetApiNixieResponses, GetApiNixieErrors, PostApiNixieData, PostApiNixieResponses, PostApiNixieErrors, GetApiNixieWsData, GetApiNixieWsErrors, GetApiFibonacciData, GetApiFibonacciResponses, GetApiFibonacciErrors, PostApiFibonacciData, PostApiFibonacciResponses, PostApiFibonacciErrors, GetApiFibonacciWsData, GetApiFibonacciWsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get device information
 * Returns basic information about the clock device including model, type, subtype, and firmware version
 */
export const getApiAbout = <ThrowOnError extends boolean = false>(options?: Options<GetApiAboutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAboutResponses, GetApiAboutErrors, ThrowOnError>({
        url: '/api/about',
        ...options
    });
};

/**
 * Get system configuration
 * Returns current system configuration including timezone, NTP server, and WiFi hostname
 */
export const getApiSystemConfig = <ThrowOnError extends boolean = false>(options?: Options<GetApiSystemConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiSystemConfigResponses, GetApiSystemConfigErrors, ThrowOnError>({
        url: '/api/system/config',
        ...options
    });
};

/**
 * Update system configuration
 * Updates system configuration. Only provided fields will be updated.
 */
export const postApiSystemConfig = <ThrowOnError extends boolean = false>(options: Options<PostApiSystemConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSystemConfigResponses, PostApiSystemConfigErrors, ThrowOnError>({
        url: '/api/system/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get available time zones
 * Returns a list of all available time zones with their POSIX rule strings.
 * Response uses chunked transfer encoding for efficient streaming of large timezone database.
 *
 */
export const getApiTimeZonedb = <ThrowOnError extends boolean = false>(options?: Options<GetApiTimeZonedbData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTimeZonedbResponses, GetApiTimeZonedbErrors, ThrowOnError>({
        url: '/api/time/zonedb',
        ...options
    });
};

/**
 * Get LED configuration
 * Returns current LED strip configuration including mode, color, brightness, and speed
 */
export const getApiLeds = <ThrowOnError extends boolean = false>(options?: Options<GetApiLedsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiLedsResponses, GetApiLedsErrors, ThrowOnError>({
        url: '/api/leds',
        ...options
    });
};

/**
 * Update LED configuration
 * Updates LED configuration. Only provided fields will be updated. Changes are broadcast to WebSocket clients.
 */
export const postApiLeds = <ThrowOnError extends boolean = false>(options: Options<PostApiLedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiLedsResponses, PostApiLedsErrors, ThrowOnError>({
        url: '/api/leds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * LED WebSocket endpoint
 * WebSocket endpoint for real-time LED control and state updates.
 *
 * **Connection behavior:**
 * - Immediately sends current LED state upon connection
 * - Accepts JSON configuration updates (same format as POST /api/leds)
 * - Broadcasts state changes to all connected clients
 * - Supports ping/pong for connection health monitoring
 *
 * **Supported frame types:**
 * - TEXT: JSON configuration updates
 * - PING/PONG: Connection health monitoring
 * - CLOSE: Clean connection termination
 *
 */
export const getApiLedsWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiLedsWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiLedsWsErrors, ThrowOnError>({
        url: '/api/leds/ws',
        ...options
    });
};

/**
 * Get Nixie clock configuration
 * Returns current Nixie clock configuration.
 * **Note:** Only available on Nixie clock firmware variants.
 *
 */
export const getApiNixie = <ThrowOnError extends boolean = false>(options?: Options<GetApiNixieData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiNixieResponses, GetApiNixieErrors, ThrowOnError>({
        url: '/api/nixie',
        ...options
    });
};

/**
 * Update Nixie clock configuration
 * Updates Nixie clock configuration. Only provided fields will be updated.
 * Changes are broadcast to WebSocket clients.
 * **Note:** Only available on Nixie clock firmware variants.
 *
 */
export const postApiNixie = <ThrowOnError extends boolean = false>(options: Options<PostApiNixieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiNixieResponses, PostApiNixieErrors, ThrowOnError>({
        url: '/api/nixie',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Nixie WebSocket endpoint
 * WebSocket endpoint for real-time Nixie clock control and state updates.
 * **Note:** Only available on Nixie clock firmware variants.
 *
 * **Connection behavior:**
 * - Immediately sends current Nixie state upon connection
 * - Accepts JSON configuration updates (same format as POST /api/nixie)
 * - Broadcasts state changes to all connected clients
 * - Supports ping/pong for connection health monitoring
 *
 * **Supported frame types:**
 * - TEXT: JSON configuration updates
 * - PING/PONG: Connection health monitoring
 * - CLOSE: Clean connection termination
 *
 */
export const getApiNixieWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiNixieWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiNixieWsErrors, ThrowOnError>({
        url: '/api/nixie/ws',
        ...options
    });
};

/**
 * Get Fibonacci clock configuration
 * Returns current Fibonacci clock configuration including theme information.
 * **Note:** Only available on Fibonacci clock firmware variants.
 *
 */
export const getApiFibonacci = <ThrowOnError extends boolean = false>(options?: Options<GetApiFibonacciData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiFibonacciResponses, GetApiFibonacciErrors, ThrowOnError>({
        url: '/api/fibonacci',
        ...options
    });
};

/**
 * Update Fibonacci clock configuration
 * Updates Fibonacci clock configuration. Only provided fields will be updated.
 * Changes are broadcast to WebSocket clients.
 * **Note:** Only available on Fibonacci clock firmware variants.
 *
 */
export const postApiFibonacci = <ThrowOnError extends boolean = false>(options: Options<PostApiFibonacciData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiFibonacciResponses, PostApiFibonacciErrors, ThrowOnError>({
        url: '/api/fibonacci',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fibonacci WebSocket endpoint
 * WebSocket endpoint for real-time Fibonacci clock control and state updates.
 * **Note:** Only available on Fibonacci clock firmware variants.
 *
 * **Connection behavior:**
 * - Immediately sends current Fibonacci state upon connection
 * - Accepts JSON configuration updates (same format as POST /api/fibonacci)
 * - Broadcasts state changes to all connected clients
 * - Supports ping/pong for connection health monitoring
 *
 * **Supported frame types:**
 * - TEXT: JSON configuration updates
 * - PING/PONG: Connection health monitoring
 * - CLOSE: Clean connection termination
 *
 */
export const getApiFibonacciWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiFibonacciWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiFibonacciWsErrors, ThrowOnError>({
        url: '/api/fibonacci/ws',
        ...options
    });
};
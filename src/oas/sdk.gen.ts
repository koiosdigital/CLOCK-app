// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetData, GetResponses, GetApiSystemAboutData, GetApiSystemAboutResponses, GetApiSystemAboutErrors, GetApiSystemConfigData, GetApiSystemConfigResponses, GetApiSystemConfigErrors, PostApiSystemConfigData, PostApiSystemConfigResponses, PostApiSystemConfigErrors, GetApiTimeZonedbData, GetApiTimeZonedbResponses, GetApiTimeZonedbErrors, GetApiLedsData, GetApiLedsResponses, GetApiLedsErrors, PostApiLedsData, PostApiLedsResponses, PostApiLedsErrors, GetApiLedsWsData, GetApiLedsWsErrors, GetApiFibonacciData, GetApiFibonacciResponses, GetApiFibonacciErrors, PostApiFibonacciData, PostApiFibonacciResponses, PostApiFibonacciErrors, GetApiFibonacciWsData, GetApiFibonacciWsErrors, GetApiFibonacciThemesData, GetApiFibonacciThemesErrors, GetApiNixieData, GetApiNixieResponses, GetApiNixieErrors, PostApiNixieData, PostApiNixieResponses, PostApiNixieErrors, GetApiNixieWsData, GetApiNixieWsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root welcome message
 * Returns a welcome message for the API
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Get system information
 * Returns firmware version, variant, and device hostname
 */
export const getApiSystemAbout = <ThrowOnError extends boolean = false>(options?: Options<GetApiSystemAboutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiSystemAboutResponses, GetApiSystemAboutErrors, ThrowOnError>({
        url: '/api/system/about',
        ...options
    });
};

/**
 * Get system configuration
 * Returns current time, timezone, and WiFi hostname configuration
 */
export const getApiSystemConfig = <ThrowOnError extends boolean = false>(options?: Options<GetApiSystemConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiSystemConfigResponses, GetApiSystemConfigErrors, ThrowOnError>({
        url: '/api/system/config',
        ...options
    });
};

/**
 * Update system configuration
 * Updates timezone, NTP server, and WiFi hostname settings. Restart required to apply changes.
 */
export const postApiSystemConfig = <ThrowOnError extends boolean = false>(options: Options<PostApiSystemConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSystemConfigResponses, PostApiSystemConfigErrors, ThrowOnError>({
        url: '/api/system/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get available timezones
 * Returns all available IANA timezone names and POSIX rules from the embedded timezone database.
 * Response is chunked to handle large datasets efficiently.
 *
 */
export const getApiTimeZonedb = <ThrowOnError extends boolean = false>(options?: Options<GetApiTimeZonedbData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTimeZonedbResponses, GetApiTimeZonedbErrors, ThrowOnError>({
        url: '/api/time/zonedb',
        ...options
    });
};

/**
 * Get LED configuration
 * Returns current LED strip configuration including mode, color, brightness, and speed
 */
export const getApiLeds = <ThrowOnError extends boolean = false>(options?: Options<GetApiLedsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiLedsResponses, GetApiLedsErrors, ThrowOnError>({
        url: '/api/leds',
        ...options
    });
};

/**
 * Update LED configuration
 * Updates LED strip settings including effect mode, color, brightness, and speed
 */
export const postApiLeds = <ThrowOnError extends boolean = false>(options: Options<PostApiLedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiLedsResponses, PostApiLedsErrors, ThrowOnError>({
        url: '/api/leds',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * LED WebSocket connection
 * Establishes a WebSocket connection for real-time LED control.
 *
 * **Connection Behavior:**
 * - On connect: Server immediately sends current LED state
 * - On update: Server broadcasts updated state to all connected clients
 *
 * **Message Format:**
 * - Send: JSON with any LED configuration fields to update
 * - Receive: Complete LED state object
 *
 * **Example Usage:**
 * ```javascript
 * const ws = new WebSocket('ws://device-ip/api/leds/ws');
 * ws.onmessage = (event) => {
 * const ledState = JSON.parse(event.data);
 * console.log('LED state:', ledState);
 * };
 * ws.send(JSON.stringify({color: {r: 255, g: 0, b: 0}}));
 * ```
 *
 */
export const getApiLedsWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiLedsWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiLedsWsErrors, ThrowOnError>({
        url: '/api/leds/ws',
        ...options
    });
};

/**
 * Get Fibonacci clock configuration
 * Returns current configuration for the Fibonacci clock display including available themes (fibonacci variant only)
 */
export const getApiFibonacci = <ThrowOnError extends boolean = false>(options?: Options<GetApiFibonacciData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiFibonacciResponses, GetApiFibonacciErrors, ThrowOnError>({
        url: '/api/fibonacci',
        ...options
    });
};

/**
 * Update Fibonacci clock configuration
 * Updates Fibonacci clock settings including brightness, theme, and on/off state
 */
export const postApiFibonacci = <ThrowOnError extends boolean = false>(options: Options<PostApiFibonacciData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiFibonacciResponses, PostApiFibonacciErrors, ThrowOnError>({
        url: '/api/fibonacci',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fibonacci WebSocket endpoint
 * WebSocket endpoint for real-time Fibonacci clock configuration updates.
 * Clients receive the current state immediately upon connection and live updates
 * when configuration changes occur.
 *
 */
export const getApiFibonacciWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiFibonacciWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiFibonacciWsErrors, ThrowOnError>({
        url: '/api/fibonacci/ws',
        ...options
    });
};

/**
 * Get available Fibonacci themes (DEPRECATED)
 * **DEPRECATED:** This endpoint has been removed. Theme information is now included
 * in the main `/api/fibonacci` GET response under the `themes` array.
 *
 * @deprecated
 */
export const getApiFibonacciThemes = <ThrowOnError extends boolean = false>(options?: Options<GetApiFibonacciThemesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiFibonacciThemesErrors, ThrowOnError>({
        url: '/api/fibonacci/themes',
        ...options
    });
};

/**
 * Get Nixie tube configuration
 * Returns current configuration for the Nixie tube display (nixie variant only)
 */
export const getApiNixie = <ThrowOnError extends boolean = false>(options?: Options<GetApiNixieData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiNixieResponses, GetApiNixieErrors, ThrowOnError>({
        url: '/api/nixie',
        ...options
    });
};

/**
 * Update Nixie tube configuration
 * Updates Nixie tube display settings including brightness, time format, and blinking dots
 */
export const postApiNixie = <ThrowOnError extends boolean = false>(options: Options<PostApiNixieData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiNixieResponses, PostApiNixieErrors, ThrowOnError>({
        url: '/api/nixie',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Nixie WebSocket endpoint
 * WebSocket endpoint for real-time Nixie tube configuration updates.
 * Clients receive the current state immediately upon connection and live updates
 * when configuration changes occur.
 *
 */
export const getApiNixieWs = <ThrowOnError extends boolean = false>(options?: Options<GetApiNixieWsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, GetApiNixieWsErrors, ThrowOnError>({
        url: '/api/nixie/ws',
        ...options
    });
};